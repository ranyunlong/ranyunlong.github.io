<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑的前端猿</title>
  
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ranyunlong.com/"/>
  <updated>2018-07-30T05:20:20.128Z</updated>
  <id>https://ranyunlong.com/</id>
  
  <author>
    <name>Yunlong Ran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用node 动手开发cli命令行工具 (1)</title>
    <link href="https://ranyunlong.com/2018/07/30/developing-command-1/"/>
    <id>https://ranyunlong.com/2018/07/30/developing-command-1/</id>
    <published>2018-07-30T04:13:18.000Z</published>
    <updated>2018-07-30T05:20:20.128Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><p>node 提供了 <code>process.argv</code> 属性，这样我们就可以通过在执行模块的时候，获取进程中的对应参数。<br><a id="more"></a></p><h3 id="命令行原理"><a href="#命令行原理" class="headerlink" title="命令行原理"></a>命令行原理</h3><p>例如项目目录下有<code>index.js</code>模块,代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.argv)</span><br></pre></td></tr></table></figure><p>使用node执行该模块：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> node index.js arg1 arg2</span><br><span class="line"><span class="meta">&gt;</span> [ 'C:\\Program Files\\nodejs\\node.exe',</span><br><span class="line">  'C:\\Users\\asus\\Desktop\\hexo\\ranyunlong\\index',</span><br><span class="line">  'arg1',</span><br><span class="line">  'arg2' ]</span><br></pre></td></tr></table></figure></p><p>控制台会输出一个数组，里面包含了我们在启动js模块时，后面跟的参数。</p><h3 id="使用Commander-js"><a href="#使用Commander-js" class="headerlink" title="使用Commander.js"></a>使用Commander.js</h3><p>上面案例中获取的这些参数，我们就可以用来制作命令行了，不过，写命令行需要的逻辑太多了，可以使用 Commander.js来生成命令、参数选项、和帮助命令、以及版本命令。<a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">学习Commander.js</a></p><h4 id="安装Commander-js"><a href="#安装Commander-js" class="headerlink" title="安装Commander.js"></a>安装Commander.js</h4><p>首先生成项目包管理文件初始化项目：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> npm init</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander</span><br></pre></td></tr></table></figure></p><h4 id="编写命令行命令"><a href="#编写命令行命令" class="headerlink" title="编写命令行命令"></a>编写命令行命令</h4><p>编写以下脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">// 导入commander模块</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="comment">// 从package.json中获取package的版本号</span></span><br><span class="line"><span class="keyword">const</span> VERSION = <span class="built_in">require</span>(<span class="string">'./package'</span>).version</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置cli 的版本信息 添加-v和--version命令访问</span></span><br><span class="line">program.version(VERSION,<span class="string">'-v, --version'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过commander解析process.argv node进程的启动参数</span></span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><blockquote><p><code>#!/usr/bin/env node</code> 是设置模块强制由node解析运行。此时使用node运行该脚本。就自动从package.json中获取到cli的版本，并显示到了控制台。是不是非常简单。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> node index -v</span><br><span class="line"><span class="meta">&gt;</span> 1.0.0</span><br></pre></td></tr></table></figure></p></blockquote><p>接下来，添加自定义命令！</p><p>比如，在用vue-cli创建项目时，可以用：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack project</span><br></pre></td></tr></table></figure></p><p>我们也可以编写一个init命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="keyword">const</span> VERSION = <span class="built_in">require</span>(<span class="string">'./package'</span>).version</span><br><span class="line">program.version(VERSION,<span class="string">'-v, --version'</span>)</span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">'init &lt;project&gt;'</span>)</span><br><span class="line">    .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">    .action(<span class="function"><span class="keyword">function</span>(<span class="params">project</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(project)</span><br><span class="line">    &#125;)</span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><blockquote><p><code>command</code> 方法用于添加自定义命令</p></blockquote><p>init 是自定义的命令名称 <code>&lt;project&gt;</code> 是我们添加的参数,也就是我们在使用时必须命令加参数才可以运行。<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> node index init myApp</span><br></pre></td></tr></table></figure></p><p>如果不添加init命令后的参数myApp就会出现以下错误<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> node index init</span><br><span class="line"><span class="meta">&gt;</span> error: missing required argument `project'</span><br></pre></td></tr></table></figure></p><blockquote><p><code>description</code> 方法用于给当前init命令添加相关描述,在使用-h或–help时即可看到该描述信息。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">    init &lt;project&gt;        generate a new project from a template</span><br></pre></td></tr></table></figure><blockquote><p><code>action</code> 方法是命令当用户使用的命令是init <code>&lt;project&gt;</code> 命令时，就会匹配到该方法的回调。并且给回调函数中传入用户输入的<code>&lt;project&gt;</code> 参数。<br>具体该实现什么业务逻辑，就可以在该回调中实现了。</p></blockquote><p>编写一个选项指令：</p><p>选项指令是什么？比如我们在使用npm安装的时候，经常会一下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g</span><br></pre></td></tr></table></figure></p><p>参数i呢就是命令 参数-g 就是选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="keyword">const</span> VERSION = <span class="built_in">require</span>(<span class="string">'./package'</span>).version</span><br><span class="line">program.version(VERSION,<span class="string">'-v, --version'</span>)</span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">'init &lt;project&gt;'</span>)</span><br><span class="line">    .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">    .action(<span class="function"><span class="keyword">function</span>(<span class="params">project</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(project)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    <span class="comment">//添加选项，指令是-g</span></span><br><span class="line">    .option(<span class="string">'-g, --global'</span>,<span class="string">'global install'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'当前执行的命令是 -g'</span>)</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><blockquote><p><code>option</code> 方法就是用来匹配选项参数的，当使用一下命令你就可以在控制台看到相关信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> node index -g</span><br><span class="line"><span class="meta">&gt;</span> 当前执行的命令是 -g</span><br></pre></td></tr></table></figure><p>当然选项也可以添加额外的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="keyword">const</span> VERSION = <span class="built_in">require</span>(<span class="string">'./package'</span>).version</span><br><span class="line">program.version(VERSION,<span class="string">'-v, --version'</span>)</span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">'init &lt;project&gt;'</span>)</span><br><span class="line">    .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">    .action(<span class="function"><span class="keyword">function</span>(<span class="params">project</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(project)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    <span class="comment">//添加选项，指令是-g</span></span><br><span class="line">    .option(<span class="string">'-g, --global &lt;name&gt;'</span>,<span class="string">'global install'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'当前执行的命令是 -g 参数为: '</span>+name )</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><p>执行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> node index -g jquery</span><br><span class="line"><span class="meta">&gt;</span> 当前执行的命令是 -g 参数为: jquery</span><br></pre></td></tr></table></figure></p><p>是不是很好玩呢：</p><blockquote><p><code>commander</code>还会自动生成帮助信息，使用一下命令查看</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index -h</span><br></pre></td></tr></table></figure><p>接下来，我们需要在package.json 中添加一个选项：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"bin": &#123;</span><br><span class="line">    "mycommander": "./index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后把模块发布至npm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> npm publish</span><br></pre></td></tr></table></figure><p>通过全局安装该模块,模块名称需要你自己定义，并且查询npm是否有重复的模块名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> npm i -g youPackage</span><br></pre></td></tr></table></figure><p>安装成功后即可使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> mycommander -v</span><br><span class="line"><span class="meta">&gt;</span> 1.0.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;p&gt;node 提供了 &lt;code&gt;process.argv&lt;/code&gt; 属性，这样我们就可以通过在执行模块的时候，获取进程中的对应参数。&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="https://ranyunlong.com/categories/node/"/>
    
    
      <category term="cli" scheme="https://ranyunlong.com/tags/cli/"/>
    
      <category term="node" scheme="https://ranyunlong.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>tkrjs控制器 controller</title>
    <link href="https://ranyunlong.com/2018/07/29/tkr-controller/"/>
    <id>https://ranyunlong.com/2018/07/29/tkr-controller/</id>
    <published>2018-07-29T15:12:40.000Z</published>
    <updated>2018-07-29T16:17:28.107Z</updated>
    
    <content type="html"><![CDATA[<p>控制器用来匹配路由，并且对对应路由的请求处理。对应路由的处理类。所有控制器在application/controllers，项目默认添加了Index.ts 控制器。</p><a id="more"></a><!--toc--><h3 id="一、控制器装饰器"><a href="#一、控制器装饰器" class="headerlink" title="一、控制器装饰器"></a>一、控制器装饰器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>tkrjs</code>中所有控制器类都应由<code>@Controller()</code> 装饰器装饰。如果不使用装饰器，控制器类将不被路由系统处理。也就无法处理响应。</p><p><strong>@Controller（routePath）</strong></p><blockquote><p>控制器装饰器中可添加参数，参数为路由的路径，默认在没有参数时 使用<code>/</code> 路径匹配</p></blockquote><p>例如：</p><p><strong>无参控制器装饰器</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该控制器匹配路径 http://localhost:3000/</span></span><br></pre></td></tr></table></figure></p><p><strong>带参控制器装饰器</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;&#125;</span><br><span class="line"><span class="comment">// 该控制器匹配路径 http://localhost:3000/users</span></span><br><span class="line"><span class="comment">// @Controller('users') 等同于 @Controller('users')</span></span><br></pre></td></tr></table></figure></p><p>控制器的作用是分配路由到该控制器，控制器中必须有该控制器匹配路由路径的处理方法，如果没有处理方法，路由不会响应到该控制器中。上面的两个案例，路由都不会响应。如需响应需配置至少一个该路径的路由处理方法。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller,Get &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> index()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例中index 是一个<code>async</code> 方法，遵循Koa的编程风格。用于该控制器的默认路径处理。处理控制器的默认路径不是控制器的构造函数，<code>tkrjs</code> 控制器中的构造函数用于处理服务的注入。</p><h3 id="二、控制器请求方式装饰器"><a href="#二、控制器请求方式装饰器" class="headerlink" title="二、控制器请求方式装饰器"></a>二、控制器请求方式装饰器</h3><p>上面的案例中，有可能你已经注意到了，在:  async index() 控制路由处理方法上，使用了<code>@Get()</code> 装饰器，用于处理http 的<code>get</code>请求，请求方式装饰器包含以下8中类型的装饰器：</p><ol><li>@All()</li><li>@Delete()</li><li>@Get()</li><li>@Head()</li><li>@Options()</li><li>@Patch()</li><li>@Post()</li><li>@Put()</li></ol><p>控制器的路由处理方法可以接受多中请求的处理，例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Post&#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> index()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时处理get 和post 请求</span></span><br></pre></td></tr></table></figure><p>请求方式装饰器还可以在装饰器中设置参数，例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller,Get &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">'api'</span>)</span><br><span class="line">  <span class="keyword">async</span> index()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/api'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把默认的路由 http://localhost/users/ 指向 修改为api http://localhost/users/api 路径的处理</span></span><br></pre></td></tr></table></figure><p>请求方式器默认不传递参数的时候是怎么匹配的？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller,Get &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> index()&#123; <span class="comment">// 匹配路径为 http://localhost/users/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> api()&#123; <span class="comment">// 匹配路径为 http://localhost/users/api</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/api'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> search()&#123; <span class="comment">// 匹配路径为 http://localhost/users/search</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/search'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、参数装饰器"><a href="#三、参数装饰器" class="headerlink" title="三、参数装饰器"></a>三、参数装饰器</h3><p>每一个控制器处理方法还可以添加参数装饰器，用于获取Koa 上下文对象<code>ctx</code> (context)的相关对应参数, 参数装饰器包含以下 10种，下一版本会扩展参数装饰器更多类型：</p><ol><li>Res <code>node http模块原生的res对象</code></li><li>Req <code>node http模块原生的req对象</code></li><li>Body <code>koa中的ctx.request.body</code></li><li>Query <code>koa中的ctx.request.query</code></li><li>Next <code>koa 中的 await next()</code> 函数</li><li>Files <code>koa 中的 ctx.files</code></li><li>Session <code>session 对象</code></li><li>Header <code>header对象</code></li><li>Headers <code>headers对象</code></li><li>Params <code>路由匹配的参数</code></li></ol><p>使用方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller,Get,Res &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> index(Res res:<span class="built_in">any</span>)&#123; <span class="comment">// 当路由请求到该路径时 打印出 res对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/api'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;控制器用来匹配路由，并且对对应路由的请求处理。对应路由的处理类。所有控制器在application/controllers，项目默认添加了Index.ts 控制器。&lt;/p&gt;
    
    </summary>
    
      <category term="tkrjs" scheme="https://ranyunlong.com/categories/tkrjs/"/>
    
    
      <category term="tkrjs" scheme="https://ranyunlong.com/tags/tkrjs/"/>
    
      <category term="tkrjs-cli" scheme="https://ranyunlong.com/tags/tkrjs-cli/"/>
    
  </entry>
  
  <entry>
    <title>tkrjs 配置 configs</title>
    <link href="https://ranyunlong.com/2018/07/29/tkrjs-config/"/>
    <id>https://ranyunlong.com/2018/07/29/tkrjs-config/</id>
    <published>2018-07-29T15:12:40.000Z</published>
    <updated>2018-07-30T04:36:06.056Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><p>项目配置在<code>application/configs/index.ts</code>文件里，可配置项目的主要配置。<br><a id="more"></a><br>默认配置参数如下：</p><h3 id="一、-默认配置"><a href="#一、-默认配置" class="headerlink" title="一、 默认配置"></a>一、 默认配置</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; TKServer &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> configs:TKServer.ServerOptionConfigs=&#123;</span><br><span class="line">    database:&#123;</span><br><span class="line">        client:<span class="string">'mysql'</span>,             <span class="comment">// 数据库类型</span></span><br><span class="line">        connection:&#123;    </span><br><span class="line">            host:<span class="string">'localhost'</span>,       <span class="comment">// 主机地址</span></span><br><span class="line">            user:<span class="string">'root'</span>,            <span class="comment">// 用户</span></span><br><span class="line">            password:<span class="string">'root'</span>,        <span class="comment">// 密码</span></span><br><span class="line">            database:<span class="string">'database'</span>     <span class="comment">// 数据库名称</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    body:&#123;  </span><br><span class="line">        patchNode:<span class="literal">true</span>,             <span class="comment">// 解析到nodejs 的ctx.req 对象上</span></span><br><span class="line">        patchKoa:<span class="literal">true</span>,              <span class="comment">// 解析到koa ctx.request上</span></span><br><span class="line">        multipart:<span class="literal">true</span>,             <span class="comment">// 解析文件上传</span></span><br><span class="line">        jsonLimit:<span class="string">'1mb'</span>,            <span class="comment">// json请求显示</span></span><br><span class="line">        formLimit:<span class="string">'56kb'</span>,           <span class="comment">// from请求限制</span></span><br><span class="line">        textLimit:<span class="string">'56kb'</span>,           <span class="comment">// text请求限制</span></span><br><span class="line">        text:<span class="literal">true</span>,                  <span class="comment">// 解析文本</span></span><br><span class="line">        json:<span class="literal">true</span>,                  <span class="comment">// 解析json</span></span><br><span class="line">        encoding:<span class="string">'utf-8'</span>,           <span class="comment">// 编码格式</span></span><br><span class="line">        urlencoded:<span class="literal">true</span>,            <span class="comment">// 解析urlencoded主体</span></span><br><span class="line">        jsonStrict:<span class="literal">true</span>,            <span class="comment">// 严格模式</span></span><br><span class="line">        strict:<span class="literal">true</span>                 <span class="comment">// 不解析GET,HEAD,DELETE请求</span></span><br><span class="line">    &#125;,</span><br><span class="line">    session:&#123;</span><br><span class="line">        key:<span class="string">'Tk:sess'</span>,              <span class="comment">// cookie 秘钥</span></span><br><span class="line">        maxAge:<span class="number">86400000</span>,            <span class="comment">// 过期时间</span></span><br><span class="line">        overwrite:<span class="literal">true</span>,             <span class="comment">// 覆盖</span></span><br><span class="line">        httpOnly:<span class="literal">true</span>,              <span class="comment">// httpOnly</span></span><br><span class="line">        signed:<span class="literal">true</span>,                <span class="comment">// 强制签名</span></span><br><span class="line">        rolling:<span class="literal">false</span>               <span class="comment">// 是否续订会话 不续订则一天后过期</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">static</span>:&#123;</span><br><span class="line">        root:path.resolve(<span class="string">'application'</span>,<span class="string">'public'</span>),</span><br><span class="line">        options:&#123;</span><br><span class="line">            maxage:<span class="number">0</span>,               <span class="comment">// 设置浏览器缓存</span></span><br><span class="line">            hidden:<span class="literal">true</span>,            <span class="comment">// 允许传输隐藏文件</span></span><br><span class="line">            index:<span class="string">'index.html'</span>,     <span class="comment">// 默认文件名</span></span><br><span class="line">            defer:<span class="literal">true</span>,             <span class="comment">// 让中间件和路由先响应</span></span><br><span class="line">            gzip:<span class="literal">true</span>,              <span class="comment">// 当客户端支持gzip时,如果存在扩展名为.gz的请求文件,请尝试自动提供文件的gzip压缩版本.</span></span><br><span class="line">            extensions:<span class="literal">false</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configs;</span><br></pre></td></tr></table></figure><h3 id="二、-接口"><a href="#二、-接口" class="headerlink" title="二、 接口"></a>二、 接口</h3><p>参数配置使用<code>TKServer.ServerOptionConfigs</code>接口，参数是默认配置，若有特殊需求可自行修改定制。</p><p>主要选项有以下4个选项：</p><h4 id="1-database"><a href="#1-database" class="headerlink" title="(1).database"></a>(1).database</h4><p><code>database</code> 选项是<code>tkrjs</code>内置的 使用<code>knex.js</code> 的数据库驱动模块,该模块的详细配置可在 <a href="https://knexjs.org/" target="_blank" rel="noopener">knex.js官网查看</a>详细配置信息。</p><h4 id="2-body"><a href="#2-body" class="headerlink" title="(2).body"></a>(2).body</h4><p><code>body</code> 选项是<code>tkrjs</code>用于解析body请求的配置，使用了koa-body中间件。<a href="https://www.npmjs.com/package/koa-body" target="_blank" rel="noopener">koa-body文档</a></p><h4 id="3-session"><a href="#3-session" class="headerlink" title="(3).session"></a>(3).session</h4><p><code>session</code> 选项是 <code>tkrjs</code>用于处理 <code>session</code> 的配置，使用了koa-session中间件。<a href="https://www.npmjs.com/package/koa-body" target="_blank" rel="noopener">koa-session文档</a></p><h4 id="4-static"><a href="#4-static" class="headerlink" title="(4).static"></a>(4).static</h4><p><code>static</code> 选项是  <code>tkrjs</code>用于处理 静态文件目录的配置， 使用了koa-static中间件 <a href="https://www.npmjs.com/package/koa-static" target="_blank" rel="noopener">koa-static文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;p&gt;项目配置在&lt;code&gt;application/configs/index.ts&lt;/code&gt;文件里，可配置项目的主要配置。&lt;br&gt;
    
    </summary>
    
      <category term="tkrjs" scheme="https://ranyunlong.com/categories/tkrjs/"/>
    
    
      <category term="tkrjs" scheme="https://ranyunlong.com/tags/tkrjs/"/>
    
      <category term="tkrjs-cli" scheme="https://ranyunlong.com/tags/tkrjs-cli/"/>
    
  </entry>
  
  <entry>
    <title>tkrjs 安装 install</title>
    <link href="https://ranyunlong.com/2018/07/29/tkrjs-install/"/>
    <id>https://ranyunlong.com/2018/07/29/tkrjs-install/</id>
    <published>2018-07-29T15:12:40.000Z</published>
    <updated>2018-07-29T16:17:44.440Z</updated>
    
    <content type="html"><![CDATA[<p>tkrjs 是开源项目，代码可通过github或npm获取，项目依赖<code>typescript</code>，使用前需先安装 <code>typescript</code></p><a id="more"></a><!-- toc --><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p><strong>npm：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 最新稳定版</span><br><span class="line">npm i tkrjs</span><br></pre></td></tr></table></figure><p><strong>github:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ranyunlong/tkrjs.git</span><br></pre></td></tr></table></figure><h3 id="命令行工具-CLI"><a href="#命令行工具-CLI" class="headerlink" title="命令行工具 (CLI)"></a>命令行工具 (CLI)</h3><p>安装tkrjs 的cli命令行工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i -g tkrjs-cli</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><strong>检测cli工具安装：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看tkr-cli的版本</span><br><span class="line"><span class="meta">&gt;</span> tkr -v</span><br><span class="line"><span class="meta">&gt;</span> 1.0.12</span><br></pre></td></tr></table></figure><p>若提示以上版本信息，表示安装成功</p><p><strong>创建项目命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> trk init &lt;project&gt;</span><br><span class="line"><span class="meta">&gt;</span> trk init myApp</span><br><span class="line"><span class="meta">&gt;</span> cd myApp</span><br><span class="line"><span class="meta">&gt;</span> npm start</span><br></pre></td></tr></table></figure><p>serve 指令用于开发测试，使用ts-node-dev 实时更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> npm serve</span><br></pre></td></tr></table></figure><p><strong>项目目录结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">WEB部署目录（或者子目录）</span><br><span class="line">├─Application                应用目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─Configs                 应用配置目录</span><br><span class="line">│  │  └─index.ts             配置文件</span><br><span class="line">│  │ </span><br><span class="line">│  ├─Controllers             控制器目录</span><br><span class="line">|  |  ├─IndexController.ts   Index控制器</span><br><span class="line">|  |  └─ApiController.ts     Api控制器</span><br><span class="line">|  |</span><br><span class="line">│  ├─model                   数据验证模型</span><br><span class="line">|  |  └─index.ts             数据验证规则文件</span><br><span class="line">|  |</span><br><span class="line">|  ├─public                  默认的静态文件目录</span><br><span class="line">|  |  ├─js                   browser js文件</span><br><span class="line">|  |  ├─css                  css 文件</span><br><span class="line">|  |  ├─img                  图片目录</span><br><span class="line">|  |  ├─uploads              文件上传目录</span><br><span class="line">|  |  └─index.html           html文件</span><br><span class="line">|  |  </span><br><span class="line">|  ├─services                自定义服务类目录</span><br><span class="line">|  |  └─index.ts             自定义服务类</span><br><span class="line">|  | </span><br><span class="line">│  └─app.ts                  应用入口文件  </span><br><span class="line">│         </span><br><span class="line">├─Public                     静态文件目录</span><br><span class="line">├─index.ts                   应用启动文件</span><br><span class="line">├─.gitignore                 git文件</span><br><span class="line">├─package.json               包管理文件</span><br><span class="line">├─README.md                  自述文件</span><br><span class="line">└─tsconfig.json              Tslang配置文件</span><br></pre></td></tr></table></figure><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>使用<code>tkrjs-cli</code>创建项目之后可配置项目的基本配置,<a href="https://github.com/ranyunlong/tkrjs/blob/master/docs/config.md" target="_blank" rel="noopener">查看详细配置文档</a>。</p><h3 id="应用入口文件配置"><a href="#应用入口文件配置" class="headerlink" title="应用入口文件配置"></a>应用入口文件配置</h3><p>应用的入口文件在<code>application/app.ts</code>,代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TKServer, ServerMode &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IndexController &#125; <span class="keyword">from</span> <span class="string">"./controllers/Index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; configs &#125; <span class="keyword">from</span> <span class="string">'./configs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> TKServer(&#123;</span><br><span class="line">    keys:[<span class="string">'app'</span>],               <span class="comment">// 用于session 签名key</span></span><br><span class="line">    configs,<span class="comment">// 位于application/config/index.ts 项目配置文件</span></span><br><span class="line">    mode:ServerMode.dev,        <span class="comment">// app 启动模式 dev有debug输出 使用ServerMode枚举参数</span></span><br><span class="line">    port:<span class="number">3000</span>,                  <span class="comment">// http 端口 默认3000</span></span><br><span class="line">    middlewares:[],             <span class="comment">// 用于添加koa的第三方中间件 若非中间件使用的频率多 不建议使用中间件 可使用自定义服务类处理</span></span><br><span class="line">    controllers:[               <span class="comment">// 控制器列表 用于处理路由的控制器 位于application/controllers目录下的控制器文件</span></span><br><span class="line">        IndexController</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>middlewares</code> 选项是一个数组，数组的成员是koa的中间件，任何第三方中间件都可以添加至<code>tkrjs</code>。所有的中间件都是在路由响应前执行完成。</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>所有控制器在<code>application/controllers</code>，项目默认添加了<code>Index.ts</code> 控制器。<br>代码如下：</p><ol><li><a href="https://github.com/ranyunlong/tkrjs/blob/master/docs/controller.md" target="_blank" rel="noopener">控制器文档</a></li><li>编写一个控制器，处理路由响应</li></ol><p>例如：</p><p>在<code>application/controllers</code> 下添加users.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller,Get,Res &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UsersController&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> index()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/users/api'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把控制器添加至<code>app.ts</code>，应用入口文件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TKServer, ServerMode &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span></span><br><span class="line"><span class="keyword">import</span> &#123; IndexController &#125; <span class="keyword">from</span> <span class="string">"./controllers/Index"</span></span><br><span class="line"><span class="comment">// 导入users 控制器</span></span><br><span class="line"><span class="keyword">import</span> &#123; UsersController &#125; <span class="keyword">from</span> <span class="string">"./controllers/Index"</span></span><br><span class="line"><span class="keyword">import</span> &#123; configs &#125; <span class="keyword">from</span> <span class="string">'./configs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> TKServer(&#123;</span><br><span class="line">    keys:[<span class="string">'app'</span>],               </span><br><span class="line">    configs,</span><br><span class="line">    mode:ServerMode.dev,        </span><br><span class="line">    port:<span class="number">3000</span>,                  </span><br><span class="line">    middlewares:[],            </span><br><span class="line">    controllers:[              </span><br><span class="line">        IndexController,</span><br><span class="line">      UsersController<span class="comment">//users控制器添加至此</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:3000/users" target="_blank" rel="noopener">http://localhost:3000/users</a> ，即可查看到页面的返回信息。</p><p>控制器的用法可查看 <a href="https://github.com/ranyunlong/tkrjs/blob/master/docs/controller.md" target="_blank" rel="noopener">控制器文档</a></p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>在控制器里，可以通过构造函数注入相应的服务在构造函数中，这样我们就不必过度依赖中间件的使用。</p><p>例如：</p><p>注入系统内置的 <code>DbService</code> 服务类，使用数据库查询相应的数据。</p><p>例如：</p><p>在<code>application/controllers/Index.ts</code>中<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, DbService, TKServer  &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">    <span class="keyword">public</span> db:TKServer.Db </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        dbService:DbService <span class="comment">// 注入DbService</span></span></span><br><span class="line"><span class="params">    </span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.db = dbService.createDb(&#123;</span><br><span class="line">            client:<span class="string">'mysql'</span>,             <span class="comment">// 数据库类型</span></span><br><span class="line">                connection:&#123;    </span><br><span class="line">                host:<span class="string">'localhost'</span>,       <span class="comment">// 主机地址</span></span><br><span class="line">                user:<span class="string">'root'</span>,            <span class="comment">// 用户</span></span><br><span class="line">                password:<span class="string">'******'</span>,        <span class="comment">// 密码</span></span><br><span class="line">                database:<span class="string">'web'</span>          <span class="comment">// 数据库名</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="keyword">async</span> index()&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.db(<span class="string">'users'</span>).select()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时访问<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a>,页面将显示数据库中的查询结果</p><p>服务也可以自定义，学习自定义服务 请查阅<a href="https://github.com/ranyunlong/tkrjs/blob/master/docs/service.md" target="_blank" rel="noopener">服务文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tkrjs 是开源项目，代码可通过github或npm获取，项目依赖&lt;code&gt;typescript&lt;/code&gt;，使用前需先安装 &lt;code&gt;typescript&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tkrjs" scheme="https://ranyunlong.com/categories/tkrjs/"/>
    
    
      <category term="tkrjs" scheme="https://ranyunlong.com/tags/tkrjs/"/>
    
      <category term="tkrjs-cli" scheme="https://ranyunlong.com/tags/tkrjs-cli/"/>
    
  </entry>
  
  <entry>
    <title>tkrjs 服务类 service</title>
    <link href="https://ranyunlong.com/2018/07/29/tkrjs-service/"/>
    <id>https://ranyunlong.com/2018/07/29/tkrjs-service/</id>
    <published>2018-07-29T15:12:40.000Z</published>
    <updated>2018-07-29T16:17:51.570Z</updated>
    
    <content type="html"><![CDATA[<p>服务是给控制器提供相关服务的，服务依赖控制器注入实现，tkrjs内部简单的实现了这一功能，tkrjs 内置有相关服务类，也可自定义服务类。</p><a id="more"></a><!--toc--><h3 id="内置服务"><a href="#内置服务" class="headerlink" title="内置服务"></a>内置服务</h3><h4 id="1-ContextService"><a href="#1-ContextService" class="headerlink" title="(1) ContextService"></a>(1) ContextService</h4><p>ContextService 是koa的<code>ctx</code>(context)上下文，通过注入该服务类。可以使用上下文的数据。</p><p>例如在控制器中:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, ContextService  &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> context:ContextService</span>)&#123;&#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="keyword">async</span> index()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在客户端请求时，就能在控制台中看到 context 对象的信息。</p><h4 id="2-DbService"><a href="#2-DbService" class="headerlink" title="(2) DbService"></a>(2) DbService</h4><p>系统内置的 <code>DbService</code> 服务类，使用数据库查询相应的数据。</p><p>例如：</p><p>在<code>application/controllers/Index.ts</code>中<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, DbService, TKServer  &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">    <span class="keyword">public</span> db:TKServer.Db </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        dbService:DbService <span class="comment">// 注入DbService</span></span></span><br><span class="line"><span class="params">    </span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.db = dbService.createDb(&#123;</span><br><span class="line">            client:<span class="string">'mysql'</span>,             <span class="comment">// 数据库类型</span></span><br><span class="line">                connection:&#123;    </span><br><span class="line">                host:<span class="string">'localhost'</span>,       <span class="comment">// 主机地址</span></span><br><span class="line">                user:<span class="string">'root'</span>,            <span class="comment">// 用户</span></span><br><span class="line">                password:<span class="string">'******'</span>,        <span class="comment">// 密码</span></span><br><span class="line">                database:<span class="string">'web'</span>          <span class="comment">// 数据库名</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="keyword">async</span> index()&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.db(<span class="string">'users'</span>).select()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在客户端请求时，就能在页面中显示该数据库查询出的数据，不过在每个控制器中配置数据库的配置信息，太繁琐，可以在<code>application/configs/index.ts</code>中全局配置。</p><p>在查询时可以简化数据库的配置操作：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, DbService, TKServer  &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IndexController&#123;</span><br><span class="line">    <span class="keyword">public</span> db:TKServer.Db </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        dbService:DbService <span class="comment">// 注入DbService</span></span></span><br><span class="line"><span class="params">    </span>)&#123;</span><br><span class="line">        <span class="comment">// dbService 会自动在全局配置中得到该配置信息</span></span><br><span class="line">        <span class="keyword">this</span>.db = dbService.createDb()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="keyword">async</span> index()&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.db(<span class="string">'users'</span>).select()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h3><p>自定义服务类，可以添加至 <code>application/services/</code>目录中。</p><p>编写一个自定义服务：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TKServer &#125; <span class="keyword">from</span> <span class="string">"tkrjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> YouService&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        ctx:TKServer.Context,configs:TKServer.ServerOptionConfigs</span></span><br><span class="line"><span class="params">    </span>)&#123;&#125;</span><br><span class="line">    youhandler()&#123;</span><br><span class="line">        <span class="comment">// todo...something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>框架在运行时会给自定义服务传入；两个参数</p><ol><li>ctx 使用 <code>TKServer.Context</code>接口 传入http 的上下文</li><li>configs 使用 <code>TKServer.ServerOptionConfigs</code> 接口 传入全局配置信息</li></ol><p>可根据业务需求添加相应的服务处理</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务是给控制器提供相关服务的，服务依赖控制器注入实现，tkrjs内部简单的实现了这一功能，tkrjs 内置有相关服务类，也可自定义服务类。&lt;/p&gt;
    
    </summary>
    
      <category term="tkrjs" scheme="https://ranyunlong.com/categories/tkrjs/"/>
    
    
      <category term="tkrjs" scheme="https://ranyunlong.com/tags/tkrjs/"/>
    
      <category term="tkrjs-cli" scheme="https://ranyunlong.com/tags/tkrjs-cli/"/>
    
  </entry>
  
  <entry>
    <title>tkrjs 文档</title>
    <link href="https://ranyunlong.com/2018/07/29/tkrjs/"/>
    <id>https://ranyunlong.com/2018/07/29/tkrjs/</id>
    <published>2018-07-29T15:12:40.000Z</published>
    <updated>2018-07-30T03:57:39.680Z</updated>
    
    <content type="html"><![CDATA[<p>Tkrjs是一个使用Typescript 为语法基础的可扩展的nodejs 服务端应用程序框架，使用面向对象的方式编程（OOP）；<br><a id="more"></a><br>框架底层使用Koajs作为基础，可快速集成并兼容Koa的相关中间件；</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><a href="https://github.com/ranyunlong/tkrjs/blob/master/docs/start.md" target="_blank" rel="noopener">开始学习</a></p><h1 id="link"><a href="#link" class="headerlink" title="link"></a>link</h1><ul><li><a href="https://github.com/ranyunlong" target="_blank" rel="noopener">Author</a></li><li><a href="https://github.com/ranyunlong/tkrjs.git" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://www.npmjs.com/package/tkrjs" target="_blank" rel="noopener">npm</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tkrjs是一个使用Typescript 为语法基础的可扩展的nodejs 服务端应用程序框架，使用面向对象的方式编程（OOP）；&lt;br&gt;
    
    </summary>
    
      <category term="tkrjs" scheme="https://ranyunlong.com/categories/tkrjs/"/>
    
    
      <category term="tkrjs" scheme="https://ranyunlong.com/tags/tkrjs/"/>
    
      <category term="tkrjs-cli" scheme="https://ranyunlong.com/tags/tkrjs-cli/"/>
    
  </entry>
  
</feed>
